Function debug(lvl, txt$)
	If (lvl <= verboseMax) Then
		m$         = ""
		Select (Left(txt, 1))
			Case ">" 
'				debugLevel = debugLevel + 1
			Case "<" 
				debugLevel = debugLevel - 1
		EndSelect
		Select(lvl)
			Case 0  : prefixtxt$ = "NONE : "
			Case 1  : prefixtxt$ = "INIT : "
			Case 2  : prefixtxt$ = "EVENT: "
			Case 3  : prefixtxt$ = "LOOP : "
			Default : prefixtxt$ = "     : "
		EndSelect
		Print "aoe("+ RSet(""+Timer(), 6) +"): " + prefixtxt + str_repeat(" ", debugLevel) + m + txt
		If (Left(txt, 1) = ">") Then debugLevel = debugLevel + 1
	EndIf
EndFunction

Function error(func$, txt$)
	debug(-1, func + " failed - " + txt)
EndFunction

Function newPosition(_x#, _y#)
	_position.vector2 = New(vector2)
	_position\x = _x
	_position\y = _y
	Return ConvertToInteger(_position)
EndFunction

Function positionTotileX#(position)
	p.vector2 = ConvertToType(position)
	Return p\x
EndFunction

Function positionTotileY#(position)
	p.vector2 = ConvertToType(position)
	Return p\y
EndFunction

Function loadFrames(_name$, _direction)
	debug(1, ">loadFrames("+_name+", "+_direction+", "+mask+")") //DEBUG
	mem = MakeMEMBlock(5)

	dat = OpenToRead(mediadir + _name + "/Image.dat")
	img = LoadImage(mediadir + _name + "/Image.png")

	width = Int(ReadLine(dat))
	height = Int(ReadLine(dat))
	mask = Int(ReadLine(dat))
	wimg = (width+height)*TW2

	if (mask) Then MaskImage img, 255, 0, 255

	framesCount = Int(ImageWidth(img)/wimg)

	debug(1, "loadFrames - New frame ("+width+", "+height+", "+framesCount+", "+wimg+")") //DEBUG
	
	PokeByte mem, 0, framesCount
	PokeInt  mem, 1, img
	
	debug(1, "<loadFrames("+_name+", "+_direction+", "+mask+")") //DEBUG
	Return mem 'muistipala, jotta voi palauttaa useita arvoja
End Function 

// ANIMAATIOT >>>>>

Function makeNewAnimation(_name$)
	debug(1, ">makeNewAnimation("+_name+")") //DEBUG
	dat = OpenToRead(mediadir + _name + "/Image.dat")
	width = Int(ReadLine(dat))
	height = Int(ReadLine(dat))
	mask = Int(ReadLine(dat))
	_directions$ = ReadLine(dat)
	_speed = Int(ReadLine(dat))
	directions = CountWords(_directions)
	debug(1, "makeNewAnimation - found "+directions+" directions") //DEBUG
	For i = 0 To directions 
		_newDirection = Int(GetWord(_directions, i))
		newAnimation(loadFrames(_name, _newDirection), _name, _newDirection, _speed)
	Next i
	CloseFile(dat)
	debug(1, "<makeNewAnimation("+_name+")") //DEBUG
EndFunction

Function newAnimation(_frames, _name$, _direction, _speed)
	'_frames muistipala, jotta voi palauttaa useita arvoja
	debug(1, ">newAnimation("+_frames+", "+_name+", "+_direction+", "+_speed+")") //DEBUG
	_newAnimation.animation		= New(animation)
	_newAnimation\framesImg		= PeekInt(_frames,1)
	_newAnimation\framesCount	= PeekByte(_frames,0)
	_newAnimation\name			= _name
	_newAnimation\speed			= _speed
	_newAnimation\direction		= _direction
	DeleteMEMBlock _frames
	debug(1, "<newAnimation("+_frames+", "+_name+", "+_direction+", "+_speed+")") //DEBUG
	Return ConvertToInteger(_newAnimation)
EndFunction

Function getAnimation(_name$, _direction)
	retmin = 999
	ret = False
	For _animation.animation = Each animation
		If (_animation\name = _name) Then
			If (_animation\direction = _direction) Then
				Return ConvertToInteger(_animation)
			Else 
				If Abs(_animation\direction-_direction) < retmin Then ret = ConvertToInteger(_animation)
			EndIf
		EndIf
	Next _animation
	If (ret = False) Then debug(1, "ERROR - getAnimation() failed - animation "+_name+"("+_direction+") Not found") //DEBUG
	Return ret
EndFunction

// ANIMAATIOT <<<<<

Function loadEverything()
	debug(1, ">loadEverything()") //DEBUG
	debug(1, "loadEverything - start loading tiles") //DEBUG
	ChDir "media/tiles"
	StartSearch
	Repeat 
		file$ = FindFile()
		If file = "" Then Exit 'no more files
		If Not (file = "." Or file = "..") Then 
			If (FileExists(tiledir + file + "/Image.dat") And FileExists(tiledir + file + "/Image.png") And FileExists(tiledir + file + "/Prototype.dat")) Then
				makeNewAnimation("tiles/"+file)
				f = OpenToRead(tiledir + file+"/Prototype.dat")
				newTilePrototype("tiles/"+file, Int(ReadInt(f)), Int(ReadInt(f)), getAnimation("tiles/"+file, 1))
				CloseFile(f)
			Else
				error("loadEverything()", "could Not load tiles/"+file) //DEBUG
			EndIf
		EndIf
	Forever
	EndSearch
	debug(1, "loadEverything - start loading units") //DEBUG
	ChDir "../units"
	StartSearch
	Repeat
		file$ = FindFile()
		If file = "" Then Exit 'no more files
		If Not (file = "." Or file = "..") Then 
			If (FileExists(unitsdir + file+"/Image.dat") And FileExists(unitsdir+file+"/Image.png") And FileExists(unitsdir + file + "/Prototype.dat")) Then
				makeNewAnimation("units/"+file)
				f = OpenToRead(unitsdir + file + "/Prototype.dat")

				newEntityPrototype(Int(ReadLine(f)), "units/"+file, Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), getAnimation("units/"+file, 0),Int(ReadLine(f)), newPosition(Int(ReadLine(f)), Int(ReadLine(f))))
				CloseFile(f)
			Else
				error("loadEverything()", "could Not load units/"+file) //DEBUG
			EndIf
		EndIf
	Forever
	EndSearch
	debug(1, "loadEverything - start loading buildings") //DEBUG
	ChDir "../buildings"
	StartSearch
	Repeat
		file$ = FindFile()
		If file = "" Then Exit 'no more files
		If Not (file = "." Or file = "..") Then 
			If (FileExists(buildingsdir + file+"/Image.dat") And FileExists(buildingsdir + file + "/Image.png") And FileExists(buildingsdir + file + "/Prototype.dat")) Then
				makeNewAnimation("buildings/" + file)

				f = OpenToRead(buildingsdir + file + "/Prototype.dat")

				newEntityPrototype(Int(ReadLine(f)), "buildings/" + file, Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), getAnimation("buildings/"+file, 0),Int(ReadLine(f)), newPosition(Int(ReadLine(f)), Int(ReadLine(f))))
				CloseFile(f)
			Else
				error("loadEverything()", "could Not load buildings/"+file+" from "+buildingsdir+file) //DEBUG
			EndIf
		EndIf
	Forever
	EndSearch
	ChDir "../.."
	debug(1, "<loadEverything()") //DEBUG
EndFunction

Function drawWorld()
	For z = 0 To 2*MS-1
		For y = 0 To MS-Abs(MS-z)-1 //TODO: use While here
			nx = Max(0,z-MS)+y
			ny = Min(MS,z)-y
'			Print "aoe: drawWorld - ("+z+", "+y+") -> ("+nx+","+ny+")"
			tx = tilexToX(nx, ny)
			ty = tileyToY(nx, ny)

			If (tx > -TW*2 And tx < SW And ty > -TH*2 And ty < (SW-PanelHeight)) Then
				_tile.tile = ConvertToType(map(nx, ny))
				_tilePrototype.tilePrototype = ConvertToType(_tile\prototype)
				_anim.animation = ConvertToType(_tilePrototype\anim)

				DrawImage _anim\framesImg, tx-TW2, ty-TH2
				Text tx, ty, _anim\name
			EndIf
		Next y
	Next z

	For _entity.entity = Each entity
		mx# = positionTotileX(_entity\position)
		my# = positionTotileY(_entity\position)
	
		tx = tilexToX(mx-2, my)
		ty = tileyToY(mx-2, my)

		If (tx > -TW*2 And tx < SW And ty > -TH*2 And ty < (SW-PanelHeight)) Then
			_entityPrototype.entityPrototype = ConvertToType(_entity\prototype)
			_anim.animation = ConvertToType(_entityPrototype\anim)
			_position.vector2 = ConvertToType(_entity\position)
			img = _anim\framesImg

			'ALAREUNASTA PIIRTÄÄÄÄÄÄÄ
			tx = tx
			ty = ty

			DrawImageBox img, tx, ty, ImageWidth(img) / _anim\framesCount * _entity\frame, 0, TW, ImageHeight(img)

			Color 255,255,255
			Text tx, ty, Str(mx)+","+Str(my)+":"+_entity\frame+","+_anim\framesCount+" - "+_anim\speed
		EndIf
	Next _entity
EndFunction

Function controls()
	MouX = MouseX()
	MouY = MouseY()

	CamX = CamX - CamSpeed * ((KeyDown(32) Or KeyDown(cbKeyRight)) - (KeyDown(30) Or KeyDown(cbKeyLeft)))
	CamY = CamY - CamSpeed * ((KeyDown(31) Or KeyDown(cbKeyDown)) - (KeyDown(17) or KeyDown(cbKeyUp)))
	
	hit = False
	
	If KeyHit(60) Then debugValuesVisible = -debugValuesVisible
	
	If mouseMoveControlActive Then
		If (MouseX() < mouseMoveControlDistance) Or (MouseX() > SW-mouseMoveControlDistance) Or (MouseY() < mouseMoveControlDistance) Or (MouseY() > SH-mouseMoveControlDistance) Then
			if (mouseMoveControlTimer = 0) Then mouseMoveControlTimer = Timer()		
			If (Timer() - mouseMoveControlTimer > mouseMoveControlTimerDelay) Then
				CamX = CamX + mouseMoveControlCamSpeed*((MouseX() < mouseMoveControlDistance) - (MouseX() > SW-mouseMoveControlDistance))
				CamY = CamY + mouseMoveControlCamSpeed*((MouseY() < mouseMoveControlDistance) - (MouseY() > SH-mouseMoveControlDistance))
			EndIf
		Else 
			mouseMoveControlTimer = 0
		EndIf
	EndIf
	
	If MouseHit(1) Then
		debug(2, ">MouseHit")
		groupEmpty(PlayerSelectedGroup)
		PlayerSelectStartX = MouseX()
		PlayerSelectStartY = MouseY()
		debug(2, "<MouseHit")
	ElseIf MouseUp(1) Then
		debug(2, ">MouseUp")
		For tEntity.entity = Each entity
			mx# = positionTotileX(tEntity\position)
			my# = positionTotileY(tEntity\position)
		
			tx = tilexToX(mx-2, my)
			ty = tileyToY(mx-2, my)

			tEntityPrototype.entityPrototype = ConvertToType(tEntity\prototype)
			tAnim.animation = ConvertToType(tEntityPrototype\anim)
			img = tAnim\framesImg

			tw = ImageWidth(img) / tAnim\framesCount
			th = ImageHeight(img)

			If (MouX > tx And MouX < (tx + tw) And MouY > ty And MouY < (ty + th)) Then
				groupAddEntity(PlayerSelectedGroup, ConvertToInteger(tEntity))
				hit = True
			EndIf
		Next tEntity
		debug(2, "<MouseUp")
	EndIf
EndFunction

Function drawGUI()
	h = SH-panelHeight

	Color 120,120,120
	Line 0, h, SW, SH-panelHeight
	Color cbBlackSkin
	Box 0, h+2, SW, SH

	tPlayerSelectedGroup.group = ConvertToType(PlayerSelectedGroup)

'	ps.entity = ConvertToType(PlayerSelect)
'	psPrototype.entityPrototype = ConvertToType(ps\prototype)

'	psPosition.vector2 = ConvertToType(ps\position)

	Color 255,255,255

	If (debugValuesVisible = 1) Then
		Text 2, 2, entityCounter + "/" + tileCounter
		Text 3, 12, tPlayerSelectedGroup\entitiesCount
	EndIf

	If (tPlayerSelectedGroup\entitiesCount = 1) Then
		For i = 0 To maxGroupEntites
			
		Next i
	ElseIf(tPlayerSelectedGroup\entitiesCount > 1) Then
		For i = 0 To maxGroupEntites
			
		Next i
	EndIf
EndFunction

Function generateMap()
	debug(1, ">generateMap()") //DEBUG
	newEntity(getEntityPrototype("buildings/tower"), newPosition(0, 0))
	For x = 0 To MS
		For y = 0 To MS
			prototype = getTilePrototype("tiles/grass")
			
			map(x, y) = newTile(prototype)
			m.tile = ConvertToType(map(x, y))
			If (m\isBlocked = False) Then
				Select(Rand(100)) 
					Case 1 : newEntity(getEntityPrototype("units/soldier"), newPosition(x, y))
					Case 2 : newEntity(getEntityPrototype("units/vieteri"), newPosition(x, y))
					Case 3 : newEntity(getEntityPrototype("buildings/tower"), newPosition(x, y))
					//TODO: Taristus, voiko generoida
					Default
				End Select
			EndIf
		Next y
	Next x
	debug(1, "<generateMap()") //DEBUG
EndFunction

Function updateAI()
	For tEntity.entity = Each entity
		_entityPrototype.entityPrototype = ConvertToType(tEntity\prototype)
		_anim.animation = ConvertToType(_entityPrototype\anim)

		'animaatio
		If _anim\framesCount > 1 And _anim\speed > 0 Then
			framesElapsed# = ((GameTime - tEntity\lastFrameTime) / Float(_anim\speed)) 
			If (framesElapsed > 1) Then
				tEntity\lastFrameTime = GameTime - (framesElapsed - RoundDown(framesElapsed)) * _anim\speed

				tEntity\frame = (tEntity\frame + RoundDown(framesElapsed)) Mod _anim\framesCount
			EndIf
		EndIf
	Next tEntity
EndFunction

Function initMap()
	debug(1, ">iniMap()") //DEBUG
	ReDim map(MS, MS)

	CamX = 0
	CamY = 0	
	debug(1, "<iniMap()") //DEBUG
End Function






Function str_repeat(txt$, c)
	If c < 1 Then Return txt
	For i = 1 To c
		txt = txt + txt
	Next i
	Return txt
EndFunction