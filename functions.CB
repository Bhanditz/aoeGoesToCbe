Function xTotilex(_x)
	Return _x
End Function

Function yTotiley(_y)
	Return _y
End Function

Function tilexToX(_tx, _ty)
	Return CamX + (_tx - _ty) * TW2
End Function

Function tileyToY(_tx, _ty)
	Return CamY + (_tx + _ty) * TH2
End Function

Function newPosition(_x#, _y#)
	_position.vector2 = New(vector2)
	_position\x = _x
	_position\y = _y
	Return ConvertToInteger(_position)
EndFunction

Function positionTotileX#(position)
	p.vector2 = ConvertToType(position)
	Return p\x
EndFunction

Function positionTotileY#(position)
	p.vector2 = ConvertToType(position)
	Return p\y
EndFunction

Function loadFrames(_name$, _direction, mask)
	mem = MakeMEMBlock(8)

	If (Not FileExists("media/" + _name + "/Image.dat")) Then MakeError "file media/" + _name + "/Image.dat Not exists"
	If (Not FileExists("media/" + _name + "/Image.png")) Then MakeError "file media/" + _name + "/Image.png Not exists"

	dat = OpenToRead("media/" + _name + "/Image.dat")
	img = LoadImage("media/" + _name + "/Image.png")

	width = Int(ReadLine(dat))
	height = Int(ReadLine(dat))
	wimg = (width+height)*TW2

	if (mask) Then MaskImage img, 255, 0, 255

	framesCount = Int(ImageWidth(img)/wimg)
	
	PokeByte mem, 0, framesCount
	PokeInt  mem, 3, img
	
	Return mem
End Function 

Function loadAnimations()
	newAnimation(loadFrames("tiles/grass", 0, 0), "tiles/grass", 0)
	newAnimation(loadFrames("units/soldier", 0, 1), "units/soldier", 0)
End Function

// ANIMAATIOT >>>>>>>>>>>>>>>

Function newAnimation(_frames, _name$, _direction)
	_newAnimation.animation	= New(animation)
	_newAnimation\frames	= _frames
	_newAnimation\name		= _name
	_newAnimation\direction	= _direction

	Return ConvertToInteger(_newAnimation)
End Function

Function getAnimation(_name$, _direction)
	For _animation.animation = Each animation
		//todo: jos ei löydy samaa direction, niin lähin.
		If (_animation\name = _name And _animation\direction = _direction) Then Return ConvertToInteger(_animation)
	Next _animation
	MakeError "aoe: ERROR - getAnimation() failed" //DEBUG
	Return False
End Function

// ANIMAATIOT <<<<<<<<<<<<<<<
// TILET >>>>>>>>>>>>>>>

Global tileCounter
Global tilePrototypeCounter

Function newTilePrototype(_name$, _isWalkable, _isSailable, _animation)
	tilePrototypeCounter = tilePrototypeCounter + 1
	_newTilePrototype.tilePrototype = New(tilePrototype)
	_newTilePrototype\uid = tilePrototypeCounter
	_newTilePrototype\name = _name
	_newTilePrototype\isWalkable = _isWalkable
	_newTilePrototype\isSailable = _isSailable
	_newTilePrototype\anim = _animation
	
	Return ConvertToInteger(_newTilePrototype)
EndFunction

Function getTilePrototype(_name$)
	For _tilePrototype.tilePrototype = Each tilePrototype
		If (_tilePrototype\name = _name) Then Return ConvertToInteger(_tilePrototype)
	Next _tilePrototype
	MakeError "aoe: ERROR - getTilePrototype() failed" //DEBUG
	Return False
EndFunction

Function newTile(_prototype)
	tileCounter = tileCounter + 1
	_newTile.tile = New(tile)
	_newTile\prototype = _prototype
	_newTile\isBlocked = False
	_newtile\entitiesAbove = MakeMEMBlock(81)
	
	Return ConvertToInteger(_newTile)
End Function

// TILET <<<<<<<<<<<<<<<

Global entityCounter
Global entityPrototypeCounter

Function newEntityPrototype(_hp, _name$, _player, _attack, _defence, _armory, _range, _abilities, _LOS, _anim, _speed, _size)
	entityPrototypeCounter = entityPrototypeCounter + 1

	_newEntityPrototype.entityPrototype = New(entityPrototype)

	_newEntityPrototype\uid = entityPrototypeCounter
	_newEntityPrototype\hp = _hp
	_newEntityPrototype\name = _name
	_newEntityPrototype\player = _player
	_newEntityPrototype\attack = _attack
	_newEntityPrototype\defence = _defence
	_newEntityPrototype\armory = _armory
	_newEntityPrototype\range = _range
	_newEntityPrototype\abilities = _abilities
	_newEntityPrototype\LOS = _LOS
	_newEntityPrototype\anim = _anim
	_newEntityPrototype\speed = _speed
	_newEntityPrototype\size = _size
	
	Return ConvertToInteger(_newEntityPrototype)
EndFunction

Function getEntityPrototype(_name$)
	For _entityPrototype.entityPrototype = Each entityPrototype
		If (_entityPrototype\name = _name) Then Return ConvertToInteger(_entityPrototype)
	Next _entityPrototype
	MakeError "aoe: ERROR - getEntityPrototype() failed" //DEBUG
	Return False
EndFunction

Function newEntity(_prototype, _position)
	entityCounter = entityCounter + 1

	_prototypeType.entityPrototype = ConvertToType(_prototype)

	_newEntity.entity = New(entity)
	_newEntity\prototype = _prototype
	_newEntity\position = _position
	_newEntity\uid = entityCounter
	_newEntity\hp = _prototypeType\hp
	_newEntity\state = 0
	_newEntity\group = 0
	_newEntity\direction = 0
	_newEntity\attackTarget = 0
	_newEntity\actionBuffer = MakeMEMBlock(11 * 4)
	_newEntity\actionProgress = 0

	_newEntity\resource = 0
	_newEntity\resourceAmount = 0

	Return ConvertToInteger(_newEntity)
End Function

Function loadPrototypes()
	Print "aoe: loadPrototypes()" //DEBUG
	ChDir "media/tiles"
	StartSearch
	Repeat
		file$ = FindFile()
		If file = "" Then Exit 'no more files
		If Not (file = "." Or file = "..") Then 
			f = OpenToRead(CurrentDir()+file+"/Prototype.dat")
			newTilePrototype("tiles/"+file, Int(ReadInt(f)), Int(ReadInt(f)), getAnimation("tiles/"+file, 0))
		EndIf
	Forever
	EndSearch

	ChDir "../units"
	StartSearch
	Repeat
		file$ = FindFile()
		If file = "" Then Exit 'no more files
		If Not (file = "." Or file = "..") Then 
			f = OpenToRead(CurrentDir()+file+"/Prototype.dat")
			newEntityPrototype(Int(ReadLine(f)), "units/"+file, Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), Int(ReadLine(f)), getAnimation("units/"+file, 0),Int(ReadLine(f)), newPosition(Int(ReadLine(f)), Int(ReadLine(f))))
		EndIf
	Forever
	EndSearch
	ChDir "../.."
EndFunction

Function drawWorld()
	For z = 0 To 2*MS-1
		For y = 0 To MS-Abs(MS-z)-1 //TODO: use While here
			nx = Max(0,z-MS)+y
			ny = Min(MS,z)-y
'			Print "aoe: drawWorld - ("+z+", "+y+") -> ("+nx+","+ny+")"
			tx = tilexToX(nx, ny)
			ty = tileyToY(nx, ny)

			If (tx > -TW*2 And tx < SW And ty > -TH*2 And ty < (SW-PanelHeight)) Then
				_tile.tile = ConvertToType(map(nx, ny))
				_tilePrototype.tilePrototype = ConvertToType(_tile\prototype)
				_anim.animation = ConvertToType(_tilePrototype\anim)

				DrawImage PeekInt(_anim\frames, 3), tx, ty
			EndIf
		Next y
	Next z

	For _entity.entity = Each entity
		mx# = positionTotileX(_entity\position)
		my# = positionTotileY(_entity\position)
	
		tx = tilexToX(mx-2, my)
		ty = tileyToY(mx-2, my)

'		If (tx > -TW*2 And tx < SW And ty > -TH*2 And ty < SW) Then
			_entityPrototype.entityPrototype = ConvertToType(_entity\prototype)
			_anim.animation = ConvertToType(_entityPrototype\anim)

			DrawImage PeekInt(_anim\frames, 3), tx, ty
			Color 255,255,255
			Text tx, ty, Str(mx)+","+Str(my)
'		EndIf
	Next _entity
End Function

Function controls()
	MouX = MouseX()
	MouY = MouseY()

	CamX = CamX - CamSpeed * (KeyDown(32) - KeyDown(30))
	CamY = CamY - CamSpeed * (KeyDown(31) - KeyDown(17))
	
	hit = False
	
	If (MouseUp(1)) Then
		For _entity.entity = Each entity
			mx# = positionTotileX(_entity\position)
			my# = positionTotileY(_entity\position)
		
			tx = tilexToX(mx-2, my)
			ty = tileyToY(mx-2, my)

			_entityPrototype.entityPrototype = ConvertToType(_entity\prototype)
			_anim.animation = ConvertToType(_entityPrototype\anim)
			img = PeekInt(_anim\frames, 3)

			tw = ImageWidth(img)/PeekByte(_anim\frames, 0)
			th = ImageHeight(img)

			If (MouX > tx And MouX < (tx + tw) And MouY > ty And MouY < (ty + th)) Then
				PlayerSelect = ConvertToInteger(_entity)
				hit = True
			EndIf
		Next _entity
		If (hit = False) then PlayerSelect = 0
	EndIf
EndFunction

Function drawGUI()
	h = SH-panelHeight

	Color 120,120,120
	Line 0, h, SW, SH-panelHeight
	Color cbBlackSkin
	Box 0, h+2, SW, SH

	If (PlayerSelect <> 0) Then 
		ps.entity = ConvertToType(PlayerSelect)
		psPrototype.entityPrototype = ConvertToType(ps\prototype)

		psPosition.vector2 = ConvertToType(ps\position)

		Color 255,255,255
		Text 100, h + 10, psPrototype\name
		Text 200, h + 10, "("+psPosition\x+","+psPosition\y+")"
		Text 100, h + 20, ps\hp+"/"+psPrototype\hp
		Text 100, h + 30, "("+psPrototype\attack+", "+psPrototype\defence+", "+psPrototype\armory+", "+psPrototype\range+")"
		Text 100, h + 50, "state: " + ps\state
	EndIf
EndFunction

Function generateMap()
	Print "aoe: generateMap()" //DEBUG
	For x = 0 To MS
		For y = 0 To MS
			prototype = getTilePrototype("tiles/grass")
			map(x, y) = newTile(prototype)
			
			If (Rand(10) = 1) Then newEntity(getEntityPrototype("units/soldier"), newPosition(x, y))
		Next y
	Next x
	newEntity(getEntityPrototype("units/soldier"), newPosition(0, 0))
End Function

Function initMap()
	Print "aoe: iniMap()" //DEBUG
	ReDim map(MS, MS)

	CamX = 0
	CamY = 0	
End Function
