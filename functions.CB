Function xTotilex(_x)
	Return _x
End Function

Function yTotiley(_y)
	Return _y
End Function

Function tilexToX(_tx, _ty)
	Return CamX + (_tx - _ty) * TW2
End Function

Function tileyToY(_tx, _ty)
	Return CamY + (_tx + _ty) * TH2
End Function

Function loadFrames(_name$, _direction)
	mem = MakeMEMBlock(8)

	If (Not FileExists("media/tiles/" + _name + ".txt")) Then MakeError "file media/tiles/" + _name + ".txt Not exists"
	If (Not FileExists("media/tiles/" + _name + ".png")) Then MakeError "file media/tiles/" + _name + ".png Not exists"

	dat = OpenToRead("media/tiles/" + _name + ".txt")
	img = LoadImage("media/tiles/" + _name + ".png")
	MaskImage img, 255, 0, 255

	width = Int(ReadLine(dat))
	height = Int(ReadLine(dat))
	wimg = (width+height)*TW2

	framesCount = Int(ImageWidth(img)/wimg)
	
	PokeByte mem, 0, framesCount
	PokeInt  mem, 3, img
	
	Return mem
End Function 

// ANIMAATIOT >>>>>>>>>>>>>>>

Function newAnimation(_frames, _name$, _direction)
	_newAnimation.animation	= New(animation)
	_newAnimation\frames	= _frames
	_newAnimation\name		= _name
	_newAnimation\direction	= _direction

	Return ConvertToInteger(_newAnimation)
End Function

Function getAnimation(_name$, _direction)
	For _animation.animation = Each animation
		//todo: jos ei löydy samaa direction, niin lähin.
		If (_animation\name = _name And _animation\direction = _direction) Then Return ConvertToInteger(_animation)
	Next _animation
	MakeError "aoe: ERROR - getAnimation() failed" //DEBUG
	Return False
End Function

// ANIMAATIOT <<<<<<<<<<<<<<<
// TILET >>>>>>>>>>>>>>>

Function loadTileAnimations()
	newAnimation(loadFrames("grass", 0), "grass", 0)
End Function

Global tileCounter

Function loadTilePrototypes()
	newTilePrototype("grass", True, False, getAnimation("grass", 0))
EndFunction

Function newTilePrototype(_name$, _isWalkable, _isSailable, _animation)
	tileCounter = tileCounter + 1
	_newTilePrototype.tilePrototype = New(tilePrototype)
	_newTilePrototype\uid = tileCounter
	_newTilePrototype\name = _name
	_newTilePrototype\isWalkable = _isWalkable
	_newTilePrototype\isSailable = _isSailable
	_newTilePrototype\anim = _animation
	
	Return ConvertToInteger(_newTilePrototype)
EndFunction

Function getTilePrototype(_name$)
	For _tilePrototype.tilePrototype = Each tilePrototype
		If (_tilePrototype\name = _name) Then Return ConvertToInteger(_tilePrototype)
	Next _tilePrototype
	MakeError "aoe: ERROR - getTilePrototype() failed" //DEBUG
	Return False
EndFunction

Function newTile(_prototype)
	_newTile.tile = New(tile)
	_newTile\prototype = _prototype
	_newTile\isBlocked = False

	Return ConvertToInteger(_newTile)
End Function

// TILET <<<<<<<<<<<<<<<

Function newEntity(_prototype)
	_newEntity.entity = New(entity)
	_newEntity\prototype = _prototype

	Return ConvertToInteger(_newEntity)
End Function

Function drawWorld()
	For z = 0 To 2*MS-1
		For y = 0 To MS-Abs(MS-z)-1 //TODO: use While here
			nx = Max(0,z-MS)+y
			ny = Min(MS,z)-y
			'Print "aoe: drawWorld - ("+z+", "+y+") -> ("+nx+","+ny+")"
			tx = tilexToX(nx, ny)
			ty = tileyToY(nx, ny)

			If (tx > -TW*2 And tx < SW And ty > -TH*2 And ty < SW) Then
				_tile.tile = ConvertToType(map(nx, ny))
				_tilePrototype.tilePrototype = ConvertToType(_tile\prototype)
				_anim.animation = ConvertToType(_tilePrototype\anim)

				DrawImage PeekInt(_anim\frames, 3), tx, ty
			EndIf
		Next y
	Next z
End Function

Function controls()
	CamX = CamX - CamSpeed * (KeyDown(32) - KeyDown(30))
	CamY = CamY - CamSpeed * (KeyDown(31) - KeyDown(17))
EndFunction

Function generateMap()
	Print "aoe: generateMap()" //DEBUG
	For x = 0 To MS
		For y = 0 To MS
			prototype = getTilePrototype("grass")
			map(x, y) = newTile(prototype)
		Next y
	Next x
End Function

Function initMap()
	Print "aoe: iniMap()" //DEBUG
	ReDim map(MS, MS)

	CamX = 0
	CamY = 0

	
End Function
